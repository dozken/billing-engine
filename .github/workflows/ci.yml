name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'
          cache-dependency-path: package-lock.json
      
      - name: Install root dependencies
        run: npm ci

      - name: Prisma generate
        run: |
          if [ "${{ matrix.service }}" = "subscription-service" ]; then
            npm run prisma:generate:subscription
          else
            npm run prisma:generate:gateway
          fi
      
      - name: Run Biome check
        run: npm run check:ci

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [subscription-service, payment-gateway-service]

    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'
          cache-dependency-path: package-lock.json
      
      - name: Install root dependencies
        run: npm ci
      
      - name: Build
        run: |
          if [ "${{ matrix.service }}" = "subscription-service" ]; then
            npm run build:subscription
          else
            npm run build:gateway
          fi
      
      - name: Test
        env:
          DATABASE_URL: postgresql://user:pass@localhost:5432/dummy
          JWT_SECRET: ${{ secrets.JWT_SECRET || 'test-secret-key' }}
        run: |
          if [ "${{ matrix.service }}" = "subscription-service" ]; then
            npm run test:subscription
          else
            npm run test:gateway
          fi

  e2e:
    runs-on: ubuntu-latest
    needs: [lint, test]
    env:
      SUBSCRIPTION_BASE_URL: ${{ vars.SUBSCRIPTION_BASE_URL }}
      PAYMENT_BASE_URL: ${{ vars.PAYMENT_BASE_URL }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install root deps
        run: npm ci

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Restore Docker layer cache
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build subscription-service image (cached)
        uses: docker/build-push-action@v6
        with:
          context: ./subscription-service
          file: ./subscription-service/Dockerfile
          load: true
          tags: subscription-service:ci
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

      - name: Build payment-gateway-service image (cached)
        uses: docker/build-push-action@v6
        with:
          context: ./payment-gateway-service
          file: ./payment-gateway-service/Dockerfile
          load: true
          tags: payment-gateway-service:ci
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

      - name: Start stack with docker-compose
        run: npm run e2e:up

      - name: Wait for services to be ready
        run: |
          SUB_URL="${SUBSCRIPTION_BASE_URL:-http://localhost:3000}"
          PAY_URL="${PAYMENT_BASE_URL:-http://localhost:3001}"
          echo "Waiting for health checks at ${SUB_URL}/health and ${PAY_URL}/health ..."
          for i in {1..60}; do
            if curl -f -s "${SUB_URL}/health" > /dev/null && \
               curl -f -s "${PAY_URL}/health" > /dev/null; then
              echo "Both services are healthy and ready."
              break
            fi
            echo "Attempt $i: services not ready yet; retrying in 2s..."
            sleep 2
          done
          # Final check to fail fast if still not up
          curl -f "${SUB_URL}/health"
          curl -f "${PAY_URL}/health"

      - name: Run E2E tests
        env:
          NODE_ENV: test
        run: npm run test:e2e

      - name: Teardown
        if: always()
        run: npm run e2e:down

      - name: Print service logs on failure
        if: failure()
        run: |
          docker compose logs --no-color subscription-service || true
          docker compose logs --no-color payment-gateway-service || true
